##########           LIQUIBASE FLOWFILE                ##########
##########  learn more http://docs.liquibase.com/flow  ##########
globalVariables:
  ### LIQUIBASE_COMMAND_TAG: REQUIRED
  ### Should be a unique identifier and change each run (e.g., job/build number)
  #LIQUIBASE_COMMAND_TAG: "${LIQUIBASE_COMMAND_TAG}"

  ### Label filters
  ### Used to specify which changesets to deploy (defaults to all)
  ### Set LB_LABELS variable from automation tool
  ### https://docs.liquibase.com/concepts/changelogs/attributes/labels.html
  ###
  LB_LABELS: "${LB_LABELS:-null}"
  LIQUIBASE_COMMAND_TAG: "${LIQUIBASE_COMMAND_TAG:-null}"


  ### Files
  ### Use absolute paths when using Liquibase's Docker container
  ###
  #DIFF_FILE: "${LB_BASE_DIR}/Diff_${LB_ENVIRONMENT}.json"
  #SNAPSHOT_FILE: "Snapshot_${LB_ENVIRONMENT}.json"

  ### Operational Reports
  ### Liquibase Pro creates operational reports for certain commands
  ### These reports can be copied to a shared location for distribution to users (e.g., S3)
  ### https://docs.liquibase.com/tools-integrations/observability/operation-reports.html
  ###
  CHECKS_REPORT: "Checks_${LB_ENVIRONMENT}.html"
  DRIFT_REPORT: "Diff_${LB_ENVIRONMENT}.html"
  ROLLBACK_REPORT: "Rollback_${LB_ENVIRONMENT}.html"
  UPDATE_REPORT: "Update_${LB_ENVIRONMENT}.html"

  ### Workflow features
  ### Set these flags to T/F to turn Liquibase Pro features on/off
  ### These flags can also be set dynamically by an automation tool based on user input, environment, team, etc.
  ###
  LB_SHOW_UPDATE_SQL: "F"

stages:

  ## The first stage of actions
  Default:
    actions:
      #
      # Validate database connection
      # https://docs.liquibase.com/commands/change-tracking/connect.html
      #
      - type: liquibase
        command: connect
      #
      # Validate changelog
      # https://docs.liquibase.com/commands/utility/validate.html
      #
      - type: liquibase
        command: validate
      #
      # View pending changes
      # https://docs.liquibase.com/commands/change-tracking/status.html
      #
      - type: liquibase
        command: status
        cmdArgs: { label-filter: "${LB_LABELS}", verbose: "true" }
      #
      # Show quality checks
      # https://docs.liquibase.com/commands/quality-checks/home.html
      #
      - type: liquibase
        if: "${LB_TEST_CHECKS} == T"
        command: checks show
        cmdArgs: { check-status: "enabled" }
      #
      # Run quality checks
      # https://docs.liquibase.com/commands/quality-checks/home.html
      #
      - type: liquibase
        command: checks run
        if: "${LB_TEST_CHECKS} == T"
        cmdArgs: {checks-scope: changelog, changeset-filter: "pending", auto-update: "on", report-name: "${CHECKS_REPORT}",  report-path: "${LB_BASE_DIR}"  }
      #
      # Run diff and check for drift
      # Update referenceURL database type in cmdArgs (e.g., oracle, mssql, snowflake, etc.)
      # https://docs.liquibase.com/commands/inspection/diff.html
      #
      #- type: liquibase
      #  if: "${LB_TEST_DRIFT} == T"
      #  command: diff
      #  globalArgs: { outputfile: "${LB_BASE_DIR}/${DIFF_FILE}" }
      #  cmdArgs: { drift-severity: "1", report-path: "${LB_BASE_DIR}",  reports-enabled: true, report-name: "${DRIFT_REPORT}", referenceURL: "offline:snowflake?snapshot=${SNAPSHOT_FILE}", format: json }
      #
      # Review pending changes
      # SQL executed can be found in the update report
      # https://docs.liquibase.com/commands/update/update-sql.html
      #
      - type: liquibase
        if: "${LB_SHOW_UPDATE_SQL} == 'T'"
        command: update-sql
      #
      # Tag database
      # https://docs.liquibase.com/commands/utility/tag.html
      #
      - type: liquibase
        command: tag
        cmdArgs: { tag: "${LIQUIBASE_COMMAND_TAG}" }
      #
      # Update database
      # https://docs.liquibase.com/commands/update/update.html
      #
      - type: liquibase
        command: update
        cmdArgs: { label-filter: "${LB_LABELS}", report-path: "${LB_BASE_DIR}", report-name: "${UPDATE_REPORT}" }
      #
      # Validate rollback
      #
      - type: liquibase
        if: "${LB_TEST_ROLLBACKS} == 'T' && !CONTAINS('${LB_ENVIRONMENT}', 'PRODDB')"
        command: rollbackSQL
      #
      # Test rollbacks
      # Typically non-production only
      # https://docs.liquibase.com/commands/rollback/rollback-by-tag.html
      #
      - type: liquibase
        if: "${LB_TEST_ROLLBACKS} == 'T' && !CONTAINS('${LB_ENVIRONMENT}', 'PRODDB')"
        command: rollback
        cmdArgs: { reports-enabled: true, report-name: "${ROLLBACK_REPORT}", report-path: "${LB_BASE_DIR}", }
      #
      # Update database
      # https://docs.liquibase.com/commands/update/update.html
      #
      - type: liquibase
        command: update
        if: "${LB_TEST_ROLLBACKS} == 'T' && !CONTAINS('${LB_ENVIRONMENT}', 'PRODDB')"
        cmdArgs: { label-filter: "${LB_LABELS}", report-enabled: "true", report-path: "${LB_BASE_DIR}", report-name: "${UPDATE_REPORT}" }
      #
      # Create updated snapshot
      # https://docs.liquibase.com/commands/inspection/snapshot.html
      #
      #- type: liquibase
      #  command: snapshot
      #  globalArgs: { outputfile: "${LB_BASE_DIR}/${SNAPSHOT_FILE}" }
      #  cmdArgs: { snapshotFormat: "json" }
      

## do these actions after all flow commands, regardless of whether the above commands were successful
endStage:
  actions:
    - type: liquibase
      command: history
